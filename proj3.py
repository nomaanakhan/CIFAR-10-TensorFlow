# -*- coding: utf-8 -*-
"""Proj3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HJngRdp1mmFRDaQ4_cUXNHxOfbwowQT4
"""

import numpy as np
from matplotlib import pyplot as plt
import tensorflow as tf
from tensorflow import keras
import time 

start = time.time()

# set the random seeds to make sure your results are reproducible
from numpy.random import seed
seed(1)

from tensorflow import set_random_seed
set_random_seed(1)

cifar10 = keras.datasets.cifar10
(X_train, y_train),(X_test, y_test) = cifar10.load_data()
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']
config = tf.ConfigProto()
config.gpu_options.allow_growth = True
with tf.device('/gpu:0'):
  # Create model
  model = keras.models.Sequential([
      keras.layers.Conv2D(32, (3, 3), padding='same', activation=tf.nn.relu, input_shape=(32, 32, 3)),
      keras.layers.Conv2D(64, (3, 3)),
      keras.layers.MaxPooling2D(2, 2),
      keras.layers.Dropout(0.2),
      keras.layers.Conv2D(32, (3, 3), padding='same', activation=tf.nn.relu, input_shape=(32, 32, 3)),
      #keras.layers.Conv2D(64, (3, 3)),
      keras.layers.MaxPooling2D(2, 2),
      keras.layers.Dropout(0.1),
      keras.layers.Conv2D(32, (3, 3), padding='same', activation=tf.nn.relu, input_shape=(32, 32, 3)),
      keras.layers.Conv2D(64, (3, 3)),
      keras.layers.MaxPooling2D(2, 2),
      keras.layers.Dropout(0.3),
      keras.layers.Flatten(),
      keras.layers.Dense(1024, activation=tf.nn.relu),
      keras.layers.Dense(512, activation=tf.nn.relu),
      keras.layers.Dense(10, activation=tf.nn.softmax)])
  model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

print('Preprocess Training Data:')
X_train = X_train /255.0

print('Training:')
with tf.device('/gpu:0'):
  model.fit(X_train, y_train, batch_size=250, epochs=50)

print('Preprocess Testing Data:')
X_test = X_test /255.0
print('Testing:')
test_loss, test_acc = model.evaluate(X_test, y_test)
print('Test accuracy:{}, Test Loss:{} '.format(test_acc, test_loss))

print("=====================================================")
end = time. time()
print(end - start)
print("=====================================================")

print("Predicting the class for some sample test data:")
prob_result = model.predict(X_test[0:25])
class_result = prob_result.argmax(axis = -1)
print(class_result.shape)
plt.figure("CFAR10 sample test results",figsize=(12, 12))
for i in range(25):
    plt.subplot(5, 5, i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(X_test[i])
    label = '{} as {}'.format(class_names[y_test[i,0]], class_names[class_result[i]])
    plt.xlabel(label)
plt.show()